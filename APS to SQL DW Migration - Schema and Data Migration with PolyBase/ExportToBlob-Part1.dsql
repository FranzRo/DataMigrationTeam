/**************************************************************************************
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, this document should not be interpreted to be a commitment on the
part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.

This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT.

Complying with all applicable copyright laws is the responsibility of the user. Without limiting the rights under copyright, no part of this
document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical,
photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation.

Microsoft may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this
document. Except as expressly provided in any written license agreement from Microsoft, the furnishing of this document does not give you any
license to these patents, trademarks, copyrights, or other intellectual property.
*************************************************************************************
History
Date		Name			Description			
03/27/2017	Arshad Ali		Created
11/24/2017  Franz Robeller  fixed errors, made it more robust, made it work for international and improved performance
**************************************************************************************/
USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name = N'APSMigration')
	DROP DATABASE APSMigration;
GO

CREATE DATABASE APSMigration
WITH   
   (REPLICATED_SIZE = 2 GB,  
   DISTRIBUTED_SIZE = 2 GB,  
   LOG_SIZE = 5 GB );  

USE APSMigration;
GO

--step 1: define all parameters
DECLARE @SchemaForExternalTable sysname = N'EXTSQLDW'
DECLARE @SqlQuery NVARCHAR(4000)
DECLARE @SchemaName sysname
DECLARE @TableName sysname
DECLARE @DatabaseName sysname

IF EXISTS(SELECT * FROM APSMigration.sys.tables WHERE name = N'DatabasesToInclude')
	DROP TABLE APSMigration.dbo.DatabasesToInclude;
CREATE TABLE APSMigration.dbo.DatabasesToInclude (databasename sysname);

--step 2: define databases that you want to include 
INSERT INTO APSMigration.dbo.DatabasesToInclude VALUES (N'AdventureWorksMPP')
INSERT INTO APSMigration.dbo.DatabasesToInclude VALUES (N'AdventureWorksPDW2012')


--step 3: fill table for all External Table DDL Queries to execute 
IF EXISTS(SELECT * FROM APSMigration.sys.tables WHERE name = N'DatabasesToProcess')
	DROP TABLE APSMigration.dbo.DatabasesToProcess;
CREATE TABLE APSMigration.dbo.DatabasesToProcess (databasename sysname)

IF EXISTS(SELECT * FROM APSMigration.sys.tables WHERE name = N'ScriptOutput')
	DROP TABLE APSMigration.dbo.ScriptOutput;
CREATE TABLE APSMigration.dbo.ScriptOutput (databasename sysname, objecttype sysname, objectname sysname, script nvarchar(4000))
;--	  WITH (CLUSTERED Index (databasename, objectname));

INSERT INTO APSMigration.dbo.DatabasesToProcess 
  SELECT name FROM [master].sys.databases WHERE name IN (SELECT databasename FROM APSMigration.dbo.DatabasesToInclude);

WHILE EXISTS (SELECT TOP 1 databasename FROM APSMigration.dbo.DatabasesToProcess)
BEGIN

	SET @DatabaseName = (SELECT TOP 1 databasename FROM APSMigration.dbo.DatabasesToProcess)

	SET @SqlQuery = N'USE [' + @DatabaseName + N']; IF EXISTS(SELECT * FROM [' + @DatabaseName + N'].sys.schemas WHERE name = ''' + @SchemaForExternalTable + N''')
	DROP SCHEMA [' + @SchemaForExternalTable + N'];
	EXEC(''CREATE SCHEMA [' + @DatabaseName + N'].[' + @SchemaForExternalTable + N'] AUTHORIZATION dbo;'')'

	INSERT INTO APSMigration.dbo.ScriptOutput (databasename, objectname, objecttype, script)
	SELECT @DatabaseName, @SchemaForExternalTable, N'schema', @SqlQuery

---new methode
	SET 	@SqlQuery = N'INSERT INTO APSMigration.dbo.ScriptOutput (databasename, objectname, objecttype, script)
	select N''' + @DatabaseName + N''' as databasename, so.name as objectname, N''table'' as objecttype,
		N''IF EXISTS(SELECT * FROM [' + @DatabaseName + N'].sys.external_tables WHERE name = N'''''' + sc.name + N''.'' + so.name + N'''''')   
			DROP TABLE [' + @DatabaseName + N'].[' + @SchemaForExternalTable + N'].['' + sc.name + N''.'' + so.name + N'']; 
		CREATE EXTERNAL TABLE [' + @DatabaseName + N'].[' + @SchemaForExternalTable + N'].['' + sc.name + N''.'' + so.name + N'']
		WITH ( 
				LOCATION = ''''/' + @DatabaseName + N'/'' + sc.name + N''/'' + so.name + N''/'''',
				DATA_SOURCE = ds_blobstorage,
				FILE_FORMAT = ff_textdelimited,
				REJECT_TYPE = VALUE,
				REJECT_VALUE = 0
			 )
		  AS SELECT * FROM [' + @DatabaseName + N'].['' + sc.name + N''].['' + so.name + N''];'' as SqlQuery
	from [' + @DatabaseName + N'].sys.tables so  
	join [' + @DatabaseName + N'].sys.schemas sc on so.schema_id = sc.schema_id  
----left outer join - will raise error during execution... - so we disabled it
--	left join [' + @DatabaseName + N'].sys.external_tables et on  so.object_id = et.object_id and so.schema_id = et.schema_id    
	where --et.name is NULL and 
	      so.type = ''U'';';

    EXEC (@SqlQuery);
---new methode - end
	
-- old methode - disabled
	--IF EXISTS(SELECT * FROM sys.tables WHERE name = N'TablesToProcess')
	--	DROP TABLE TablesToProcess;
	--CREATE TABLE TablesToProcess (schemaname sysname, tablename sysname)  WITH (CLUSTERED Index (schemaname, tablename))

	--SET @SqlQuery = N'INSERT INTO TablesToProcess (schemaname, tablename) 
	--select sc.name, so.name     
	--from [' + @DatabaseName + N'].sys.tables so  
	--join [' + @DatabaseName + N'].sys.schemas sc on so.schema_id = sc.schema_id  
	--left join [master].sys.external_tables et on so.object_id = et.object_id    
	--where et.name is NULL and so.type = ''U'';' ;

	--EXEC(@SqlQuery)

	--WHILE EXISTS (SELECT TOP 1 tablename FROM TablesToProcess)
	--BEGIN
	--	SET @TableName = (SELECT TOP 1 tablename FROM TablesToProcess)
	--	SET @SchemaName = (SELECT TOP 1 schemaname FROM TablesToProcess WHERE tablename = @TableName)

	--	SET @SqlQuery = N'IF EXISTS(SELECT * FROM [' + @DatabaseName + N'].sys.external_tables WHERE name = N''' + @SchemaName + N'.' + @TableName + N''')   
	--						DROP TABLE [' + @SchemaForExternalTable + N'].[' + @SchemaName + N'.' + @TableName + N']; '

	--	SET @SqlQuery = @SqlQuery + N' CREATE EXTERNAL TABLE [' + @SchemaForExternalTable + N'].[' + @SchemaName + N'.' + @TableName + N']
	--		WITH ( 
	--			LOCATION = ''/' + @DatabaseName + N'/' + @SchemaName + N'/' + @TableName + N'/'',
	--			DATA_SOURCE = ds_blobstorage,
	--			FILE_FORMAT = ff_textdelimited,
	--			REJECT_TYPE = VALUE,
	--			REJECT_VALUE = 0
	--		)
	--		AS SELECT * FROM [' + @DatabaseName + N'].[' + @SchemaName + N'].[' + @TableName + N'];';

	--	INSERT INTO ScriptOutput (databasename, objectname, objecttype, script)
	--	SELECT @DatabaseName, @TableName, N'table', @SqlQuery	

	--	DELETE FROM TablesToProcess WHERE tablename = @TableName
	--END
-- old methode - disabled -end

	DELETE FROM APSMigration.dbo.DatabasesToProcess WHERE databasename = @DatabaseName
END
GO

--step 4: return results and clean up 
select * from APSMigration.dbo.ScriptOutput order by databasename asc, objecttype asc, objectname asc 

USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name like N'APSMigration')
	DROP DATABASE APSMigration;
